system_img_source = dataBlock(
    maxSize: (1000 * 1000 * 64) bytes
    type: Array(1000, Array(1000, Double))
)

dimX = dataBlock(maxSize: 16 bytes, type: Uint(16))

dimY = dataBlock(maxSize: 16 bytes, type: Uint(16))

GrayScale = function(
        system_img_source_address: input Array(1000, Array(1000, Double)),
        dimX: input Uint(16),
        dimY: input Uint(16),
        gray: output Array(6, Double),
        dimsOut: output Array(2, Uint(16)),
        offsetX: inout Uint(16),
        offsetY: inout Uint(16)
    )
    impl ANSI_C inline """
        gray[0] = 
            0.3125 * system_img_source_address[offsetY + 0][offsetX + 0] +
            0.5625 * system_img_source_address[offsetY + 0][offsetX + 1] +
            0.125 * system_img_source_address[offsetY + 0][offsetX + 2];
        gray[1] = 
            0.3125 * system_img_source_address[offsetY + 0][offsetX + 2] +
            0.5625 * system_img_source_address[offsetY + 0][offsetX + 3] +
            0.125 * system_img_source_address[offsetY + 0][offsetX + 4];
        gray[2] = 
            0.3125 * system_img_source_address[offsetY + 1][offsetX + 0] +
            0.5625 * system_img_source_address[offsetY + 1][offsetX + 1] +
            0.125 * system_img_source_address[offsetY + 1][offsetX + 2];
        gray[3] = 
            0.3125 * system_img_source_address[offsetY + 1][offsetX + 2] +
            0.5625 * system_img_source_address[offsetY + 1][offsetX + 3] +
            0.125 * system_img_source_address[offsetY + 1][offsetX + 4];
        gray[4] = 
            0.3125 * system_img_source_address[offsetY + 2][offsetX + 0] +
            0.5625 * system_img_source_address[offsetY + 2][offsetX + 1] +
            0.125 * system_img_source_address[offsetY + 2][offsetX + 2];
        gray[5] = 
            0.3125 * system_img_source_address[offsetY + 2][offsetX + 2] +
            0.5625 * system_img_source_address[offsetY + 2][offsetX + 3] +
            0.125 * system_img_source_address[offsetY + 2][offsetX + 4];
        if (offsetX >= dimX - 2) {
            offsetY += 1;
            offsetX = 0;
        }
        if (offsetY >= dimY - 2) {
            offsetY = 0;
        }
        dimsOut[0] = dimX;
        dimsOut[1] = dimY;
    """
    impl ANSI_C requires [
        "assign": 8,
        "boolean": 2, 
        "integer": 3,
        "float": 18
    ]

offSets = sdf.channel(type: Uint(16), initialValues: [0, 0])    

GrayScaleActor = sdf.actor(
    system_img_source_address: (3 * 64 * 9) bytes
    dimX: 16 bytes
    dimY: 16 bytes
    gray: tokens(6, Double), 
    dimsOut: tokens(6, Uint(16)),
    offsetIn: tokens(-2, Uint(16)),
    offsetOut: tokens(2, Uint(16))) {
    combinators [GrayScale]
}

// might fill the description of the actor later...
GetPxActor = sdf.actor(
    gray1: tokens(-6, Double),
    gray2: tokens(-6, Double),
    copyX: tokens(6, Double),
    copyY: tokens(6, Double)) {
    
}

GrayScaleActor["gray"] >> GetPxActor["gray2"]
